package org.eclipse.jetty.http;

import java.io.IOException;
import java.lang.reflect.Field;
import java.net.Socket;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.eclipse.jetty.io.EndPoint;
import org.eclipse.jetty.server.AsyncContextEvent;
import org.eclipse.jetty.server.HttpChannel;
import org.eclipse.jetty.server.HttpChannelState;
import org.eclipse.jetty.server.Request;
import org.eclipse.jetty.server.Response;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.util.URIUtil;
import org.eclipse.jetty.util.log.Log;
import org.eclipse.jetty.util.log.Logger;

import com.sun.net.httpserver.HttpServer;

/**
 * HttpServer Class
 *
 * <p>Copyright (c) Rory Slegtenhorst
 * <p>Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * <p>The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * <p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @author Rory Slegtenhorst <rory.slegtenhorst@gmail.com>
 */
public class HttpServer extends Server {

	private static final Logger LOG = Log.getLogger(HttpServer.class);

	private Socket getCurrentSocket(EndPoint p) {
		Socket result = null;
		try {
			Field f = getDeclaredField(p.getClass(), "_socket");
			f.setAccessible(true);
			result = (Socket) f.get(p);
		} catch (Exception e) {
			LOG.warn("Unable to get handle for current socket");
		}
		return result;
	}

	private Field getDeclaredField(Class<?> c, String name) {
		Field result = null;
		try {
			result = c.getDeclaredField(name);
		} catch (NoSuchFieldException e) {
			if (c.getSuperclass() != null) {
				return getDeclaredField(c.getSuperclass(), name);
			}
		}
		return result;
	}

	@Override
	public void handle(HttpChannel<?> connection) throws IOException, ServletException {
        final String target=connection.getRequest().getPathInfo();
        final Request request=connection.getRequest();
        final Response response=connection.getResponse();

		Socket socket = getCurrentSocket(connection.getEndPoint());
		if (socket != null) request.setAttribute("socket", socket);

        if (LOG.isDebugEnabled())
            LOG.debug(request.getDispatcherType()+" "+request.getMethod()+" "+target+" on "+connection);

        if ("*".equals(target))
        {
            handleOptions(request,response);
            if (!request.isHandled())
                handle(target, request, request, response);
        }
        else
            handle(target, request, request, response);

        if (LOG.isDebugEnabled())
            LOG.debug("RESPONSE "+target+"  "+connection.getResponse().getStatus()+" handled="+request.isHandled());
	}

	@Override
	public void handleAsync(HttpChannel<?> connection) throws IOException, ServletException {
        final HttpChannelState state = connection.getRequest().getHttpChannelState();
        final AsyncContextEvent event = state.getAsyncContextEvent();

        final Request baseRequest=connection.getRequest();
        final String path=event.getPath();

        if (path!=null)
        {
            // this is a dispatch with a path
            ServletContext context=event.getServletContext();
            HttpURI uri = new HttpURI(URIUtil.addPaths(context==null?null:context.getContextPath(), path));
            baseRequest.setUri(uri);
            baseRequest.setRequestURI(null);
            baseRequest.setPathInfo(uri.getDecodedPath());
            if (uri.getQuery()!=null)
                baseRequest.mergeQueryParameters(uri.getQuery(), true); //we have to assume dispatch path and query are UTF8
        }

        final String target=baseRequest.getPathInfo();
        final HttpServletRequest request=(HttpServletRequest)event.getSuppliedRequest();
        final HttpServletResponse response=(HttpServletResponse)event.getSuppliedResponse();

		Socket socket = getCurrentSocket(connection.getEndPoint());
		if (socket != null) request.setAttribute("socket", socket);

        if (LOG.isDebugEnabled())
        {
            LOG.debug(request.getDispatcherType()+" "+request.getMethod()+" "+target+" on "+connection);
            handle(target, baseRequest, request, response);
            LOG.debug("RESPONSE "+target+"  "+connection.getResponse().getStatus());
        }
        else
            handle(target, baseRequest, request, response);
	}

}
